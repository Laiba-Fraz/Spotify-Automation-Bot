#name: androidBuild
#
#on:
#  push:
#    branches: [main]
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0  # This ensures all tags are fetched
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: "17"
#          distribution: "adopt"
#          cache: gradle
#
#      - name: Calculate new version
#        id: version
#        run: |
#          # Get the latest tag
#          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v1.0.0")
#          echo "Current tag: $latest_tag"
#
#          # Extract the version numbers
#          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
#            major="${BASH_REMATCH[1]}"
#            minor="${BASH_REMATCH[2]}"
#            patch="${BASH_REMATCH[3]}"
#
#            # Increment patch version
#            new_patch=$((patch + 1))
#            new_tag="v$major.$minor.$new_patch"
#          else
#            new_tag="v1.0.0"
#          fi
#
#          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
#          echo "New tag will be: $new_tag"
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build APK
#        run: ./gradlew assembleRelease
#        env:
#          VERSION_NAME: ${{ steps.version.outputs.new_tag }}
#
#      - name: Rename APK
#        run: mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Appilot_${{ steps.version.outputs.new_tag }}.apk
#
#      - name: Upload APK Artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: apk
#          path: app/build/outputs/apk/release/Appilot_${{ steps.version.outputs.new_tag }}.apk
#
#  release:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Download APK Artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: apk
#          path: ./artifact
#
#      - name: Calculate new version
#        id: version
#        run: |
#          # Get the latest tag
#          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v1.0.0")
#
#          # Extract the version numbers
#          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
#            major="${BASH_REMATCH[1]}"
#            minor="${BASH_REMATCH[2]}"
#            patch="${BASH_REMATCH[3]}"
#
#            # Increment patch version
#            new_patch=$((patch + 1))
#            new_tag="v$major.$minor.$new_patch"
#          else
#            new_tag="v1.0.0"
#          fi
#
#          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
#
#      - name: Create and push new tag
#        run: |
#          git tag ${{ steps.version.outputs.new_tag }}
#          git push origin ${{ steps.version.outputs.new_tag }}
#
#      - name: Release APK to Target Repository
#        uses: softprops/action-gh-release@v2
#        with:
#          files: ./artifact/*
#          repository: BitBashOwn/appilot-APK
#          tag_name: ${{ steps.version.outputs.new_tag }}
#          token: ${{ secrets.TARGET_REPO_ACCESS_TOKEN }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_ACCESS_TOKEN }}






name: androidBuild

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "adopt"
          cache: gradle

      - name: Calculate new version
        id: version
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v1.0.0")
          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            new_patch=$((patch + 1))
            new_tag="v$major.$minor.$new_patch"
          else
            new_tag="v1.0.0"
          fi
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Debug Directory Structure
        run: |
          echo "Listing root directory..."
          ls -la
          echo "Listing app directory..."
          ls -la app
          echo "Listing gradle directory..."
          ls -la gradle

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > gradle/release.keystore

      - name: Verify Keystore File
        run: |
          ls -l gradle/release.keystore
          file gradle/release.keystore

      - name: Set Keystore File Permissions
        run: chmod 600 gradle/release.keystore

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build APK
        run: ./gradlew assembleRelease
        env:
          VERSION_NAME: ${{ steps.version.outputs.new_tag }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: app/build/outputs/apk/release/app-release.apk

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: apk
          path: ./artifact

      - name: Calculate new version
        id: version
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v1.0.0")

          # Extract the version numbers
          if [[ $latest_tag =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"

            # Increment patch version
            new_patch=$((patch + 1))
            new_tag="v$major.$minor.$new_patch"
          else
            new_tag="v1.0.0"
          fi

          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and push new tag
        run: |
          git tag ${{ steps.version.outputs.new_tag }}
          git push origin ${{ steps.version.outputs.new_tag }}

      - name: Release APK to Target Repository
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifact/*
          repository: BitBashOwn/appilot-APK
          tag_name: ${{ steps.version.outputs.new_tag }}
          token: ${{ secrets.TARGET_REPO_ACCESS_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_ACCESS_TOKEN }}